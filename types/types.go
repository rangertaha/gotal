package types

type TimeSeries interface {
	Metrics() chan Metric
}

type Metric interface {
	ID() string                 // unique identifier for the metric
	Name() string               // name of the metric
	Time() int64                // unix timestamp
	Sps() int64                 // samples per second
	Fields() map[string]float64 // fields of the metric
	Tags() map[string]string    // tags of the metric
	Patterns() []Pattern        // patterns of the metric
}

type Pattern interface {
	ID() string   // unique identifier for the pattern
	UID() string  // autogenerated token of the pattern
	Name() string // name of the pattern
}

type Processor interface {
	Process(in chan Metric) (out chan Metric)
}

// type ProcessorFunc func(in chan Metric, points int64) (out chan Metric)

// func (f ProcessorFunc) Process(in chan Metric) (out chan Metric) {
// 	return f(in, points)
// }

type Indicator interface {
	Bullish() bool
	Bearish() bool
	Strong() bool
	VeryStrong() bool
	Reversal() bool
}

type IndicatorFunc func(in chan Metric) (out chan Metric)

